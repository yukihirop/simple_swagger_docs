#frozen_string_literal:true

# Generated Date: <%= Time.now.strftime('%Y-%m-%d') %>
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: <%= "lib/simple_swagger_docs/#{generator.schema_version}/generators/schema" %>

<%- relative_module_path = "../" * (generator.schema_relative_dirdepth + 1) -%>
<% if generator.require_contents.size != 0 %>
  <% generator.require_contents.each do |require_content| %>
require_relative '<%= require_content %>'
  <% end %>
<% end %>
<% generator.module_includers.each do |module_includer| %>
<%= "require_relative '#{module_includer.require_content}'" %>
<% end %>
require_relative '<%= "#{relative_module_path}node_updatable" %>'
require_relative '<%= "#{relative_module_path}docs_methods" %>'

module SimpleSwaggerDocs
  module <%= generator.schema_version.camelize %>
    module Schema
      class <%= generator.class_name %>
        include NodeUpdatable
        include DocsMethods
<% generator.module_includers.each do |module_includer| %>
        include <%= module_includer.schema_object_name.camelize %>
<% end %>

        class << self
          def have_patterned_methods?
<% if generator.patterned_methods.size != 0 %>
            true
<% else %>
            false
<% end %>
          end
        end

<% generator.attribute_accessors.each do |method_generator| %>
        attr_accessor :<%= method_generator.method_name_at_schema %>
<% end %>
        attr_accessor :<%= generator.schema_object_name.underscore %>

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)
<% generator.module_includers.each do |module_includer| %>
          initialize_<%= "#{module_includer.schema_object_name}" %>_args(openapi_data)
<% end %>

<% generator.initialize_attributes.each do |method_generator| %>
          self.<%= method_generator.method_name_at_schema %> = <%= "openapi_data[:#{method_generator.method_name_at_schema}]" %>
<% end %>
          @openapi_data = openapi_data
          <%= "@#{generator.schema_object_name}" %> ||= {
            <% generator.attribute_accessors.each do |method_generator| %>
            <%= method_generator.method_name_at_schema %>: nil,
            <% end %>
          }
          
<% generator.module_includers.each do |module_includer| %>
          merged_from_<%= "#{module_includer.schema_object_name}" %>!(<%= "@#{generator.schema_object_name}" %>)
<% end %>
        end
<% if generator.generated_methods.size != 0 %>
  <% generator.generated_methods.each_with_index do |method_generator, index| %>
    
        def <%= method_generator.method_signature %>
          <%= method_generator.method_content %>
        end
  <% end %>
<% end %>

        def have_patterned_content?(method_name)
<% if generator.patterned_methods.size != 0 %>
          <%= generator.patterned_methods %>.include?(method_name)
<% else %>
          false
<% end %>
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_<%= generator.schema_object_name %>
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
<%- generator.required_args.each do |method_name_at_schema| -%>
          <%= "bad_args << :#{method_name_at_schema} if openapi_data[:#{method_name_at_schema}].nil?" %>
<%- end -%>
          <%= "unless bad_args.empty?" %>
            <%= "required_keys = bad_args.join(', ')" %>
            <%= "raise \"initialize args:" %> <%= '#{required_keys}' %> <%= "is required.\"" %>
          end
        end
      end
    end
  end
end
