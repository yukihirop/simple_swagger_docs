#frozen_string_literal:true

# Generated Date: 2018-09-26
# Template File:  generators/templates/class_generators/openapi_object_root_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative 'info_object'
require_relative 'server_object'
require_relative 'paths_object'
require_relative 'components_object'
require_relative 'security_requirement_object'
require_relative 'tag_object'
require_relative 'external_document_object'
require_relative '../root_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class OpenapiObject
        extend RootUpdatable
        extend DocsMethods
        
        class << self
          attr_accessor :openapi
          attr_accessor :info
          attr_accessor :servers
          attr_accessor :paths
          attr_accessor :components
          attr_accessor :security
          attr_accessor :tags
          attr_accessor :externalDocs
          attr_accessor :openapi_object

          def build
            @openapi_object ||= {
              openapi: nil,
              info: nil,
              servers: nil,
              paths: nil,
              components: nil,
              security: nil,
              tags: nil,
              externalDocs: nil,
          }
          end
    
          def openapi
            return @openapi_object[:openapi] unless @openapi_object[:openapi].nil?
            @openapi_object[:openapi] ||= ::Settings.openapi
          end
    
          def info
            if @openapi_data&.fetch(:info, nil).is_a?(Hash)
              return @openapi_object[:info] unless @openapi_object[:info].nil?
              data = @openapi_data[:info]
              if InfoObject.have_patterned_methods?
                data = { info: data }
              end
              @openapi_object[:info] = InfoObject.new(data)
            else
              @openapi_object[:info]
            end
          end
    
          def servers
            if @openapi_data&.fetch(:servers, nil).is_a?(Array)
              return @openapi_object[:servers] unless @openapi_object[:servers].nil?
              servers = []
              @openapi_data[:servers].each do |data|
                servers << ServerObject.new(data)
              end
              @openapi_object[:servers] = servers
            else
              @openapi_object[:servers]
            end
          end
    
          def paths
            if @openapi_data&.fetch(:paths, nil).is_a?(Hash)
              return @openapi_object[:paths] unless @openapi_object[:paths].nil?
              data = @openapi_data[:paths]
              if PathsObject.have_patterned_methods?
                data = { paths: data }
              end
              @openapi_object[:paths] = PathsObject.new(data)
            else
              @openapi_object[:paths]
            end
          end
    
          def components
            if @openapi_data&.fetch(:components, nil).is_a?(Hash)
              return @openapi_object[:components] unless @openapi_object[:components].nil?
              data = @openapi_data[:components]
              if ComponentsObject.have_patterned_methods?
                data = { components: data }
              end
              @openapi_object[:components] = ComponentsObject.new(data)
            else
              @openapi_object[:components]
            end
          end
    
          def security
            if @openapi_data&.fetch(:security, nil).is_a?(Array)
              return @openapi_object[:security] unless @openapi_object[:security].nil?
              security = []
              @openapi_data[:security].each do |data|
                security << SecurityRequirementObject.new(data)
              end
              @openapi_object[:security] = security
            else
              @openapi_object[:security]
            end
          end
    
          def tags
            if @openapi_data&.fetch(:tags, nil).is_a?(Array)
              return @openapi_object[:tags] unless @openapi_object[:tags].nil?
              tags = []
              @openapi_data[:tags].each do |data|
                tags << TagObject.new(data)
              end
              @openapi_object[:tags] = tags
            else
              @openapi_object[:tags]
            end
          end
    
          def externalDocs
            if @openapi_data&.fetch(:externalDocs, nil).is_a?(Hash)
              return @openapi_object[:externalDocs] unless @openapi_object[:externalDocs].nil?
              data = @openapi_data[:externalDocs]
              if ExternalDocumentObject.have_patterned_methods?
                data = { externalDocs: data }
              end
              @openapi_object[:externalDocs] = ExternalDocumentObject.new(data)
            else
              @openapi_object[:externalDocs]
            end
          end

          def have_patterned_content?(method_name)
            false
          end

          def patterned_object?
            false
          end
        end
      end
    end
  end
end
