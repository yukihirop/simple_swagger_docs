#frozen_string_literal:true

# Generated Date: 2018-09-25
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative 'server_object'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class LinkObject
        include NodeUpdatable
        include DocsMethods

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :operationRef
        attr_accessor :operationId
        attr_accessor :parameters
        attr_accessor :requestBody
        attr_accessor :desscription
        attr_accessor :server
        attr_accessor :link_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)

          self.operationRef = openapi_data[:operationRef]
          self.operationId = openapi_data[:operationId]
          self.parameters = openapi_data[:parameters]
          self.requestBody = openapi_data[:requestBody]
          self.desscription = openapi_data[:desscription]
          @openapi_data = openapi_data
          @link_object ||= {
            operationRef: nil,
            operationId: nil,
            parameters: nil,
            requestBody: nil,
            desscription: nil,
            server: nil,
          }
          
        end
    
        def server
          if openapi_data_at_link_object&.fetch(:server, nil).is_a?(Hash)
            return @link_object[:server] unless @link_object[:server].nil?
            data = @openapi_data[:server]
            if ServerObject.have_patterned_methods?
              data = { server: data }
            end
            @link_object[:server] = ServerObject.new(data)
          else
            @link_object[:server] || openapi_data_at_link_object[:server]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_link_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(',')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
