#frozen_string_literal:true

# Generated Date: 2018-09-26
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative 'cherry/header_cherry_object'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class EncodingObject
        include NodeUpdatable
        include DocsMethods

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :contentType
        attr_accessor :headers
        attr_accessor :style
        attr_accessor :explode
        attr_accessor :allowReserved
        attr_accessor :encoding_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)

          self.contentType = openapi_data[:contentType]
          self.style = openapi_data[:style]
          self.explode = openapi_data[:explode]
          self.allowReserved = openapi_data[:allowReserved]
          @openapi_data = openapi_data
          @encoding_object ||= {
            contentType: nil,
            headers: nil,
            style: nil,
            explode: nil,
            allowReserved: nil,
          }
          
        end
    
        def headers
          if openapi_data_at_encoding_object&.fetch(:headers, nil).is_a?(Hash)
            return @encoding_object[:headers] unless @encoding_object[:headers].nil?
            headers_content = {}
            openapi_data_at_encoding_object[:headers].each do |key, data|
              headers_content[key] = HeaderCherryObject.build(data)
            end
            @encoding_object[:headers] = headers_content
          else
            @encoding_object[:headers] || openapi_data_at_encoding_object[:headers]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_encoding_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(', ')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
