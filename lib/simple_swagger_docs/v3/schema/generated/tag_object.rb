#frozen_string_literal:true

# Generated Date: 2018-09-25
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative 'external_document_object'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class TagObject
        include NodeUpdatable
        include DocsMethods

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :name
        attr_accessor :description
        attr_accessor :externalDocs
        attr_accessor :tag_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)

          self.name = openapi_data[:name]
          self.description = openapi_data[:description]
          @openapi_data = openapi_data
          @tag_object ||= {
            name: nil,
            description: nil,
            externalDocs: nil,
          }
          
        end
    
        def externalDocs
          if openapi_data_at_tag_object&.fetch(:externalDocs, nil).is_a?(Hash)
            return @tag_object[:externalDocs] unless @tag_object[:externalDocs].nil?
            data = @openapi_data[:externalDocs]
            if ExternalDocumentObject.have_patterned_methods?
              data = { externalDocs: data }
            end
            @tag_object[:externalDocs] = ExternalDocumentObject.new(data)
          else
            @tag_object[:externalDocs] || openapi_data_at_tag_object[:externalDocs]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_tag_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          bad_args << :name if openapi_data[:name].nil?
          unless bad_args.empty?
            required_keys = bad_args.join(',')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
