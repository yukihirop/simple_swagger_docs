#frozen_string_literal:true

# Generated Date: 2018-09-25
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative 'cherry/schema_cherry_object'
require_relative 'cherry/response_cherry_object'
require_relative 'cherry/parameter_cherry_object'
require_relative 'cherry/example_cherry_object'
require_relative 'cherry/request_body_cherry_object'
require_relative 'cherry/header_cherry_object'
require_relative 'cherry/security_schema_cherry_object'
require_relative 'cherry/link_cherry_object'
require_relative 'cherry/callback_cherry_object'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class ComponentsObject
        include NodeUpdatable
        include DocsMethods

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :schemas
        attr_accessor :responses
        attr_accessor :parameters
        attr_accessor :examples
        attr_accessor :requestBodies
        attr_accessor :headers
        attr_accessor :securitySchemes
        attr_accessor :links
        attr_accessor :callbacks
        attr_accessor :components_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)

          @openapi_data = openapi_data
          @components_object ||= {
            schemas: nil,
            responses: nil,
            parameters: nil,
            examples: nil,
            requestBodies: nil,
            headers: nil,
            securitySchemes: nil,
            links: nil,
            callbacks: nil,
          }
          
        end
    
        def schemas
          if openapi_data_at_components_object&.fetch(:schemas, nil).is_a?(Hash)
            return @components_object[:schemas] unless @components_object[:schemas].nil?
            schemas_content = {}
            openapi_data_at_components_object[:schemas].each do |key, data|
              schemas_content[key] = SchemaCherryObject.build(data)
            end
            @components_object[:schemas] = schemas_content
          else
            @components_object[:schemas] || openapi_data_at_components_object[:schemas]
          end
        end
    
        def responses
          if openapi_data_at_components_object&.fetch(:responses, nil).is_a?(Hash)
            return @components_object[:responses] unless @components_object[:responses].nil?
            responses_content = {}
            openapi_data_at_components_object[:responses].each do |key, data|
              responses_content[key] = ResponseCherryObject.build(data)
            end
            @components_object[:responses] = responses_content
          else
            @components_object[:responses] || openapi_data_at_components_object[:responses]
          end
        end
    
        def parameters
          if openapi_data_at_components_object&.fetch(:parameters, nil).is_a?(Hash)
            return @components_object[:parameters] unless @components_object[:parameters].nil?
            parameters_content = {}
            openapi_data_at_components_object[:parameters].each do |key, data|
              parameters_content[key] = ParameterCherryObject.build(data)
            end
            @components_object[:parameters] = parameters_content
          else
            @components_object[:parameters] || openapi_data_at_components_object[:parameters]
          end
        end
    
        def examples
          if openapi_data_at_components_object&.fetch(:examples, nil).is_a?(Hash)
            return @components_object[:examples] unless @components_object[:examples].nil?
            examples_content = {}
            openapi_data_at_components_object[:examples].each do |key, data|
              examples_content[key] = ExampleCherryObject.build(data)
            end
            @components_object[:examples] = examples_content
          else
            @components_object[:examples] || openapi_data_at_components_object[:examples]
          end
        end
    
        def requestBodies
          if openapi_data_at_components_object&.fetch(:requestBodies, nil).is_a?(Hash)
            return @components_object[:requestBodies] unless @components_object[:requestBodies].nil?
            requestBodies_content = {}
            openapi_data_at_components_object[:requestBodies].each do |key, data|
              requestBodies_content[key] = RequestBodyCherryObject.build(data)
            end
            @components_object[:requestBodies] = requestBodies_content
          else
            @components_object[:requestBodies] || openapi_data_at_components_object[:requestBodies]
          end
        end
    
        def headers
          if openapi_data_at_components_object&.fetch(:headers, nil).is_a?(Hash)
            return @components_object[:headers] unless @components_object[:headers].nil?
            headers_content = {}
            openapi_data_at_components_object[:headers].each do |key, data|
              headers_content[key] = HeaderCherryObject.build(data)
            end
            @components_object[:headers] = headers_content
          else
            @components_object[:headers] || openapi_data_at_components_object[:headers]
          end
        end
    
        def securitySchemes
          if openapi_data_at_components_object&.fetch(:securitySchemes, nil).is_a?(Hash)
            return @components_object[:securitySchemes] unless @components_object[:securitySchemes].nil?
            securitySchemes_content = {}
            openapi_data_at_components_object[:securitySchemes].each do |key, data|
              securitySchemes_content[key] = SecuritySchemaCherryObject.build(data)
            end
            @components_object[:securitySchemes] = securitySchemes_content
          else
            @components_object[:securitySchemes] || openapi_data_at_components_object[:securitySchemes]
          end
        end
    
        def links
          if openapi_data_at_components_object&.fetch(:links, nil).is_a?(Hash)
            return @components_object[:links] unless @components_object[:links].nil?
            links_content = {}
            openapi_data_at_components_object[:links].each do |key, data|
              links_content[key] = LinkCherryObject.build(data)
            end
            @components_object[:links] = links_content
          else
            @components_object[:links] || openapi_data_at_components_object[:links]
          end
        end
    
        def callbacks
          if openapi_data_at_components_object&.fetch(:callbacks, nil).is_a?(Hash)
            return @components_object[:callbacks] unless @components_object[:callbacks].nil?
            callbacks_content = {}
            openapi_data_at_components_object[:callbacks].each do |key, data|
              callbacks_content[key] = CallbackCherryObject.build(data)
            end
            @components_object[:callbacks] = callbacks_content
          else
            @components_object[:callbacks] || openapi_data_at_components_object[:callbacks]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_components_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(',')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
