#frozen_string_literal:true

# Generated Date: 2018-09-25
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v3/generators/schema

require_relative '../xml_object'
require_relative '../external_document_object'
require_relative '../schema_object'
require_relative '../json_schema/custom/custom_json_schema_object'
require_relative '../json_schema/json_schema_property'
require_relative '../../node_updatable'
require_relative '../../docs_methods'

module SimpleSwaggerDocs
  module V3
    module Schema
      class CustomSchemaObject
        include NodeUpdatable
        include DocsMethods
        include JsonSchemaProperty

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :nullable
        attr_accessor :discriminator
        attr_accessor :readOnly
        attr_accessor :xml
        attr_accessor :externalDocs
        attr_accessor :example
        attr_accessor :deprecated
        attr_accessor :type
        attr_accessor :allOf
        attr_accessor :oneOf
        attr_accessor :anyOf
        attr_accessor :not
        attr_accessor :items
        attr_accessor :properties
        attr_accessor :additionalProperties
        attr_accessor :description
        attr_accessor :format
        attr_accessor :default
        attr_accessor :custom_schema_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)
          initialize_json_schema_property_args(openapi_data)

          self.nullable = openapi_data[:nullable]
          self.discriminator = openapi_data[:discriminator]
          self.readOnly = openapi_data[:readOnly]
          self.example = openapi_data[:example]
          self.deprecated = openapi_data[:deprecated]
          self.type = openapi_data[:type]
          self.description = openapi_data[:description]
          self.format = openapi_data[:format]
          @openapi_data = openapi_data
          @custom_schema_object ||= {
            nullable: nil,
            discriminator: nil,
            readOnly: nil,
            xml: nil,
            externalDocs: nil,
            example: nil,
            deprecated: nil,
            type: nil,
            allOf: nil,
            oneOf: nil,
            anyOf: nil,
            not: nil,
            items: nil,
            properties: nil,
            additionalProperties: nil,
            description: nil,
            format: nil,
            default: nil,
          }
          
          merged_from_json_schema_property!(@custom_schema_object)
        end
    
        def xml
          if openapi_data_at_custom_schema_object&.fetch(:xml, nil).is_a?(Hash)
            return @custom_schema_object[:xml] unless @custom_schema_object[:xml].nil?
            data = @openapi_data[:xml]
            if XmlObject.have_patterned_methods?
              data = { xml: data }
            end
            @custom_schema_object[:xml] = XmlObject.new(data)
          else
            @custom_schema_object[:xml] || openapi_data_at_custom_schema_object[:xml]
          end
        end
    
        def externalDocs
          if openapi_data_at_custom_schema_object&.fetch(:externalDocs, nil).is_a?(Hash)
            return @custom_schema_object[:externalDocs] unless @custom_schema_object[:externalDocs].nil?
            data = @openapi_data[:externalDocs]
            if ExternalDocumentObject.have_patterned_methods?
              data = { externalDocs: data }
            end
            @custom_schema_object[:externalDocs] = ExternalDocumentObject.new(data)
          else
            @custom_schema_object[:externalDocs] || openapi_data_at_custom_schema_object[:externalDocs]
          end
        end
    
        def allOf
          if openapi_data_at_custom_schema_object&.fetch(:allOf, nil).is_a?(Hash)
            return @custom_schema_object[:allOf] unless @custom_schema_object[:allOf].nil?
            data = @openapi_data[:allOf]
            if SchemaObject.have_patterned_methods?
              data = { allOf: data }
            end
            @custom_schema_object[:allOf] = SchemaObject.new(data)
          else
            @custom_schema_object[:allOf] || openapi_data_at_custom_schema_object[:allOf]
          end
        end
    
        def oneOf
          if openapi_data_at_custom_schema_object&.fetch(:oneOf, nil).is_a?(Hash)
            return @custom_schema_object[:oneOf] unless @custom_schema_object[:oneOf].nil?
            data = @openapi_data[:oneOf]
            if SchemaObject.have_patterned_methods?
              data = { oneOf: data }
            end
            @custom_schema_object[:oneOf] = SchemaObject.new(data)
          else
            @custom_schema_object[:oneOf] || openapi_data_at_custom_schema_object[:oneOf]
          end
        end
    
        def anyOf
          if openapi_data_at_custom_schema_object&.fetch(:anyOf, nil).is_a?(Hash)
            return @custom_schema_object[:anyOf] unless @custom_schema_object[:anyOf].nil?
            data = @openapi_data[:anyOf]
            if SchemaObject.have_patterned_methods?
              data = { anyOf: data }
            end
            @custom_schema_object[:anyOf] = SchemaObject.new(data)
          else
            @custom_schema_object[:anyOf] || openapi_data_at_custom_schema_object[:anyOf]
          end
        end
    
        def not
          if openapi_data_at_custom_schema_object&.fetch(:not, nil).is_a?(Hash)
            return @custom_schema_object[:not] unless @custom_schema_object[:not].nil?
            data = @openapi_data[:not]
            if SchemaObject.have_patterned_methods?
              data = { not: data }
            end
            @custom_schema_object[:not] = SchemaObject.new(data)
          else
            @custom_schema_object[:not] || openapi_data_at_custom_schema_object[:not]
          end
        end
    
        def items
          if openapi_data_at_custom_schema_object&.fetch(:items, nil).is_a?(Hash)
            return @custom_schema_object[:items] unless @custom_schema_object[:items].nil?
            data = @openapi_data[:items]
            if SchemaObject.have_patterned_methods?
              data = { items: data }
            end
            @custom_schema_object[:items] = SchemaObject.new(data)
          else
            @custom_schema_object[:items] || openapi_data_at_custom_schema_object[:items]
          end
        end
    
        def properties
          if openapi_data_at_custom_schema_object&.fetch(:properties, nil).is_a?(Hash)
            return @custom_schema_object[:properties] unless @custom_schema_object[:properties].nil?
            data = @openapi_data[:properties]
            if CustomJsonSchemaObject.have_patterned_methods?
              data = { properties: data }
            end
            @custom_schema_object[:properties] = CustomJsonSchemaObject.new(data)
          else
            @custom_schema_object[:properties] || openapi_data_at_custom_schema_object[:properties]
          end
        end
    
        def additionalProperties
          if openapi_data_at_custom_schema_object&.fetch(:additionalProperties, nil).is_a?(Hash)
            return @custom_schema_object[:additionalProperties] unless @custom_schema_object[:additionalProperties].nil?
            data = @openapi_data[:additionalProperties]
            if CustomJsonSchemaObject.have_patterned_methods?
              data = { additionalProperties: data }
            end
            @custom_schema_object[:additionalProperties] = CustomJsonSchemaObject.new(data)
          else
            @custom_schema_object[:additionalProperties] || openapi_data_at_custom_schema_object[:additionalProperties]
          end
        end
    
        def default
          if openapi_data_at_custom_schema_object&.fetch(:default, nil).is_a?(Hash)
            return @custom_schema_object[:default] unless @custom_schema_object[:default].nil?
            data = @openapi_data[:default]
            if SchemaObject.have_patterned_methods?
              data = { default: data }
            end
            @custom_schema_object[:default] = SchemaObject.new(data)
          else
            @custom_schema_object[:default] || openapi_data_at_custom_schema_object[:default]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_custom_schema_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(',')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
