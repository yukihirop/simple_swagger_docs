#frozen_string_literal:true

# Generated Date: 2018-09-25
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v2/generators/schema

require_relative 'external_documentation_object'
require_relative 'cherry/parameter_cherry_object'
require_relative 'responses_object'
require_relative 'security_requirement_object'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V2
    module Schema
      class OperationObject
        include NodeUpdatable
        include DocsMethods

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :tags
        attr_accessor :summary
        attr_accessor :description
        attr_accessor :externalDocs
        attr_accessor :operationId
        attr_accessor :consumes
        attr_accessor :produces
        attr_accessor :parameters
        attr_accessor :responses
        attr_accessor :schemes
        attr_accessor :deprecated
        attr_accessor :security
        attr_accessor :operation_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)

          self.tags = openapi_data[:tags]
          self.summary = openapi_data[:summary]
          self.description = openapi_data[:description]
          self.operationId = openapi_data[:operationId]
          self.consumes = openapi_data[:consumes]
          self.produces = openapi_data[:produces]
          self.schemes = openapi_data[:schemes]
          self.deprecated = openapi_data[:deprecated]
          @openapi_data = openapi_data
          @operation_object ||= {
            tags: nil,
            summary: nil,
            description: nil,
            externalDocs: nil,
            operationId: nil,
            consumes: nil,
            produces: nil,
            parameters: nil,
            responses: nil,
            schemes: nil,
            deprecated: nil,
            security: nil,
          }
          
        end
    
        def externalDocs
          if openapi_data_at_operation_object&.fetch(:externalDocs, nil).is_a?(Hash)
            return @operation_object[:externalDocs] unless @operation_object[:externalDocs].nil?
            data = @openapi_data[:externalDocs]
            if ExternalDocumentationObject.have_patterned_methods?
              data = { externalDocs: data }
            end
            @operation_object[:externalDocs] = ExternalDocumentationObject.new(data)
          else
            @operation_object[:externalDocs] || openapi_data_at_operation_object[:externalDocs]
          end
        end
    
        def parameters
          if openapi_data_at_operation_object&.fetch(:parameters, nil).is_a?(Array)
            return @operation_object[:parameters] unless @operation_object[:parameters].nil?
            parameters_content = []
            openapi_data_at_operation_object[:parameters].each do |data|
              if ParameterCherryObject.have_patterned_methods?
                data = { parameters: data }
              end
              parameters_content << ParameterCherryObject.build(data)
            end
            @operation_object[:parameters] = parameters_content
          else
            @operation_object[:parameters] || openapi_data_at_operation_object[:parameters]
          end
        end
    
        def responses
          if openapi_data_at_operation_object&.fetch(:responses, nil).is_a?(Hash)
            return @operation_object[:responses] unless @operation_object[:responses].nil?
            data = @openapi_data[:responses]
            if ResponsesObject.have_patterned_methods?
              data = { responses: data }
            end
            @operation_object[:responses] = ResponsesObject.new(data)
          else
            @operation_object[:responses] || openapi_data_at_operation_object[:responses]
          end
        end
    
        def security
          if openapi_data_at_operation_object&.fetch(:security, nil).is_a?(Array)
            return @operation_object[:security] unless @operation_object[:security].nil?
            security_content = []
            openapi_data_at_operation_object[:security].each do |data|
              if SecurityRequirementObject.have_patterned_methods?
                data = { security: data }
              end
              security_content << SecurityRequirementObject.new(data)
            end
            @operation_object[:security] = security_content
          else
            @operation_object[:security] || openapi_data_at_operation_object[:security]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_operation_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(',')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
