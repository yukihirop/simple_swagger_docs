#frozen_string_literal:true

# Generated Date: 2018-09-26
# Template File:  generators/templates/class_generators/openapi_object_node_class_template.rb.erb
#
# This file was auto-generated by generators/tasks/generate.rb
#
# Please do not modify this file
# Please modify here: lib/simple_swagger_docs/v2/generators/schema

require_relative 'xml_object'
require_relative 'external_documentation_object'
require_relative 'json_schema/json_schema_property'
require_relative 'json_schema/json_schema_adjusted_by_swagger_property'
require_relative '../node_updatable'
require_relative '../docs_methods'

module SimpleSwaggerDocs
  module V2
    module Schema
      class SchemaObject
        include NodeUpdatable
        include DocsMethods
        include JsonSchemaProperty
        include JsonSchemaAdjustedBySwaggerProperty

        class << self
          def have_patterned_methods?
            false
          end
        end

        attr_accessor :discriminator
        attr_accessor :readOnly
        attr_accessor :xml
        attr_accessor :externalDocs
        attr_accessor :example
        attr_accessor :schema_object

        def initialize(openapi_data = {})
          check_initialize_args(openapi_data)
          initialize_json_schema_property_args(openapi_data)
          initialize_json_schema_adjusted_by_swagger_property_args(openapi_data)

          self.discriminator = openapi_data[:discriminator]
          self.readOnly = openapi_data[:readOnly]
          self.example = openapi_data[:example]
          @openapi_data = openapi_data
          @schema_object ||= {
            discriminator: nil,
            readOnly: nil,
            xml: nil,
            externalDocs: nil,
            example: nil,
          }
          
          merged_from_json_schema_property!(@schema_object)
          merged_from_json_schema_adjusted_by_swagger_property!(@schema_object)
        end
    
        def xml
          if openapi_data_at_schema_object&.fetch(:xml, nil).is_a?(Hash)
            return @schema_object[:xml] unless @schema_object[:xml].nil?
            data = @openapi_data[:xml]
            if XmlObject.have_patterned_methods?
              data = { xml: data }
            end
            @schema_object[:xml] = XmlObject.new(data)
          else
            @schema_object[:xml] || openapi_data_at_schema_object[:xml]
          end
        end
    
        def externalDocs
          if openapi_data_at_schema_object&.fetch(:externalDocs, nil).is_a?(Hash)
            return @schema_object[:externalDocs] unless @schema_object[:externalDocs].nil?
            data = @openapi_data[:externalDocs]
            if ExternalDocumentationObject.have_patterned_methods?
              data = { externalDocs: data }
            end
            @schema_object[:externalDocs] = ExternalDocumentationObject.new(data)
          else
            @schema_object[:externalDocs] || openapi_data_at_schema_object[:externalDocs]
          end
        end

        def have_patterned_content?(method_name)
          false
        end

        def patterned_object?
          false
        end

        private

        def openapi_data_at_schema_object
          if @openapi_data.is_a?(Hash)
            @openapi_data
          else
            raise
          end
        end

        def check_initialize_args(openapi_data)
          bad_args = []
          unless bad_args.empty?
            required_keys = bad_args.join(', ')
            raise "initialize args: #{required_keys} is required."
          end
        end
      end
    end
  end
end
